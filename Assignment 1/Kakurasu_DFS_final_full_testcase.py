import tracemalloc
import time
import numpy as np
from itertools import combinations

############################################# TESTCASE
###################     test 4
board4_e_1 = [[0, 0, 0, 0, 4],
              [0, 0, 0, 0, 3],
              [0, 0, 0, 0, 4],
              [0, 0, 0, 0, 1],
              [7, 2, 1, 3, 0]]

board4_e_2 = [[0, 0, 0, 0, 6],
              [0, 0, 0, 0, 6],
              [0, 0, 0, 0, 8],
              [0, 0, 0, 0, 6],
              [8, 7, 8, 5, 0]]

board4_h_1 = [[0, 0, 0, 0, 4],
              [0, 0, 0, 0, 7],
              [0, 0, 0, 0, 6],
              [0, 0, 0, 0, 1],
              [5, 3, 3, 5, 0]]

board4_h_2 = [[0, 0, 0, 0, 3],
              [0, 0, 0, 0, 7],
              [0, 0, 0, 0, 3],
              [0, 0, 0, 0, 7],
              [9, 9, 1, 6, 0]]

size4 = 4

###################     test 5
board5_e_1 = [[0, 0, 0, 0, 0, 8],
              [0, 0, 0, 0, 0, 13],
              [0, 0, 0, 0, 0, 8],
              [0, 0, 0, 0, 0, 13],
              [0, 0, 0, 0, 0, 8],
              [14, 3, 12, 11, 10, 0]]

board5_e_2 = [[0, 0, 0, 0, 0, 10],
              [0, 0, 0, 0, 0, 5],
              [0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 12],
              [0, 0, 0, 0, 0, 6],
              [5, 12, 3, 13, 10, 0]]

board5_h_1 = [[0, 0, 0, 0, 0, 4],
              [0, 0, 0, 0, 0, 7],
              [0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 12],
              [0, 0, 0, 0, 0, 9],
              [4, 14, 8, 13, 9, 0]]

board5_h_2 = [[0, 0, 0, 0, 0, 12],
              [0, 0, 0, 0, 0, 6],
              [0, 0, 0, 0, 0, 10],
              [0, 0, 0, 0, 0, 4],
              [0, 0, 0, 0, 0, 12],
              [11, 11, 5, 13, 6, 0]]
size5 = 5

###################     test 6
board6_e_1 = [[0, 0, 0, 0, 0, 0, 5],
              [0, 0, 0, 0, 0, 0, 17],
              [0, 0, 0, 0, 0, 0, 17],
              [0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 0, 14],
              [14, 10, 17, 9, 15, 20, 0]]

board6_e_2 = [[0, 0, 0, 0, 0, 0, 15],
              [0, 0, 0, 0, 0, 0, 12],
              [0, 0, 0, 0, 0, 0, 12],
              [0, 0, 0, 0, 0, 0, 13],
              [0, 0, 0, 0, 0, 0, 20],
              [0, 0, 0, 0, 0, 0, 17],
              [16, 20, 14, 12, 15, 18, 0]]

board6_h_1 = [[0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 0, 13],
              [0, 0, 0, 0, 0, 0, 7],
              [0, 0, 0, 0, 0, 0, 6],
              [0, 0, 0, 0, 0, 0, 10],
              [17, 5, 1, 7, 17, 10, 0]]

board6_h_2 = [[0, 0, 0, 0, 0, 0, 7],
              [0, 0, 0, 0, 0, 0, 16],
              [0, 0, 0, 0, 0, 0, 9],
              [0, 0, 0, 0, 0, 0, 3],
              [0, 0, 0, 0, 0, 0, 10],
              [0, 0, 0, 0, 0, 0, 16],
              [13, 10, 5, 12, 16, 8, 0]]
size6 = 6

###################     test 7
board7_e_1 = [[0, 0, 0, 0, 0, 0, 0, 15],
              [0, 0, 0, 0, 0, 0, 0, 13],
              [0, 0, 0, 0, 0, 0, 0, 17],
              [0, 0, 0, 0, 0, 0, 0, 6],
              [0, 0, 0, 0, 0, 0, 0, 7],
              [0, 0, 0, 0, 0, 0, 0, 15],
              [0, 0, 0, 0, 0, 0, 0, 13],
              [6, 1, 8, 5, 6, 23, 16, 0]]

board7_e_2 = [[0, 0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 0, 21],
              [0, 0, 0, 0, 0, 0, 0, 23],
              [0, 0, 0, 0, 0, 0, 0, 21],
              [0, 0, 0, 0, 0, 0, 0, 23],
              [0, 0, 0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 0, 0, 23],
              [21, 19, 24, 24, 5, 22, 27, 0]]

board7_h_1 = [[0, 0, 0, 0, 0, 0, 0, 24],
              [0, 0, 0, 0, 0, 0, 0, 22],
              [0, 0, 0, 0, 0, 0, 0, 4],
              [0, 0, 0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 0, 0, 19],
              [0, 0, 0, 0, 0, 0, 0, 21],
              [0, 0, 0, 0, 0, 0, 0, 20],
              [17, 14, 17, 19, 21, 25, 10, 0]]

board7_h_2 = [[0, 0, 0, 0, 0, 0, 0, 20],
              [0, 0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 0, 6],
              [0, 0, 0, 0, 0, 0, 0, 12],
              [0, 0, 0, 0, 0, 0, 0, 15],
              [0, 0, 0, 0, 0, 0, 0, 22],
              [0, 0, 0, 0, 0, 0, 0, 20],
              [4, 18, 15, 25, 17, 25, 7, 0]]
size7 = 7
###################     test 8
board8_e_1 = [[0, 0, 0, 0, 0, 0, 0, 0, 15],
              [0, 0, 0, 0, 0, 0, 0, 0, 2],
              [0, 0, 0, 0, 0, 0, 0, 0, 7],
              [0, 0, 0, 0, 0, 0, 0, 0, 7],
              [0, 0, 0, 0, 0, 0, 0, 0, 3],
              [0, 0, 0, 0, 0, 0, 0, 0, 19],
              [0, 0, 0, 0, 0, 0, 0, 0, 13],
              [0, 0, 0, 0, 0, 0, 0, 0, 18],
              [7, 3, 14, 16, 14, 15, 7, 13, 0]]

board8_e_2 = [[0, 0, 0, 0, 0, 0, 0, 0, 24],
              [0, 0, 0, 0, 0, 0, 0, 0, 35],
              [0, 0, 0, 0, 0, 0, 0, 0, 33],
              [0, 0, 0, 0, 0, 0, 0, 0, 34],
              [0, 0, 0, 0, 0, 0, 0, 0, 35],
              [0, 0, 0, 0, 0, 0, 0, 0, 19],
              [0, 0, 0, 0, 0, 0, 0, 0, 27],
              [0, 0, 0, 0, 0, 0, 0, 0, 31],
              [16, 25, 33, 29, 22, 29, 30, 35, 0]]

board8_h_1 = [[0, 0, 0, 0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 0, 0, 0, 11],
              [0, 0, 0, 0, 0, 0, 0, 0, 12],
              [0, 0, 0, 0, 0, 0, 0, 0, 16],
              [0, 0, 0, 0, 0, 0, 0, 0, 33],
              [0, 0, 0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 0, 0, 24],
              [23, 21, 19, 31, 26, 25, 7, 19, 0]]

board8_h_2 = [[0, 0, 0, 0, 0, 0, 0, 0, 14],
              [0, 0, 0, 0, 0, 0, 0, 0, 3],
              [0, 0, 0, 0, 0, 0, 0, 0, 24],
              [0, 0, 0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 0, 0, 34],
              [0, 0, 0, 0, 0, 0, 0, 0, 11],
              [0, 0, 0, 0, 0, 0, 0, 0, 27],
              [0, 0, 0, 0, 0, 0, 0, 0, 20],
              [12, 30, 26, 15, 9, 19, 28, 23, 0]]

size8 = 8
###################     test 9
board9_e_1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 44],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 39],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 26],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 36],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 39],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 41],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 33],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 36],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 36],
              [29, 40, 42, 30, 34, 36, 42, 37, 33, 0]]

board9_e_2 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 11],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 9],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 27],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 9],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 18],
              [12, 10, 7, 5, 22, 11, 14, 5, 11, 0]]

board9_h_1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 9],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 33],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 41],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 26],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 17],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 28],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 13],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 18],
              [44, 15, 20, 19, 13, 29, 13, 42, 14, 0]]

board9_h_2 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 17],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 22],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 18],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 17],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 42],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 40],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 39],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 23],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 10],
              [24, 27, 35, 29, 14, 24, 42, 23, 21, 0]]

size9 = 9

####################################################################### CODE
def get_value_right(board, row, col):
    if board[row][col] == 1:
        return col + 1
    else:
        return 0


def get_value_bottom(board, row, col):
    if board[row][col] == 1:
        return row + 1
    else:
        return 0


def check_final(board, size):
    for row in range(0, size):
        sum_row = 0
        for col in range(0, size):
            sum_row += get_value_right(board, row, col)
        if sum_row != board[row][size]:
            return False
    for col in range(0, size):
        sum_col = 0
        for row in range(0, size):
            sum_col += get_value_bottom(board, row, col)
        if sum_col != board[size][col]:
            return False
    return True


def check_sum(target, set_lst):
    if set_lst is None:
        return False
    else:
        if sum(set_lst) == target: return True
        return False


def valid_combination(target, size):
    result = []
    lst = [i for i in range(1, size + 1)]  # tao list cac so de phuc vu tao combination
    for i in range(1,size+1):
        temp_lst = list(combinations(lst, i))
        for j in temp_lst:
            if check_sum(target, j): result.append(j)
    return result
def solve(board, size, row):
    if check_final(board, size):
        print("SOLUTION FOUND")
        return board
    if row > size:
        print("None")
        return None
    valid_lst = valid_combination(board[row][size], size)
    if len(valid_lst) == 0: return None
    for lst in valid_lst:
        for value in lst:
            board[row][value - 1] = 1
        print("Next step is")
        print(np.asarray(board))
        if solve(board, size, row + 1) is None:
            for value in lst:
                board[row][value - 1] = 0
            print("IT'S NOT WAY TO SOLUTION- SET BOARD BACK: ")
            print(np.asarray(board))
        else:
            return solve(board, size, row + 1)


def main(board, size):
    result = solve(board, size, 0)
    if result is None:
        print("NO SOLUTION")
    else:
        print("SOLUTION IS")
        print(np.asarray(board))


########################################################## CHECK MEMORY AND TIME
game = board7_e_1
size = size7

start = time.time()
tracemalloc.clear_traces()
tracemalloc.start()
main(game,size)
print(f"Bộ nhớ tối đa sử dụng: {tracemalloc.get_traced_memory()[1]} bytes")
tracemalloc.stop()
print(f"Thời gian chạy là {time.time()-start} giây ")
